# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright Antony Polukhin 2014.
# Copyright Adam Wulkiewicz 2015.

general:
  branches:
    only:
      - master
      - develop
      - test

machine:
  environment:
    # required directories
    BOOST_DIR: boost-local
    COVERAGE_DIR: coverage-local
    PROJECT_ROOT: $HOME/$CIRCLE_PROJECT_REPONAME
    BOOST_ROOT: $PROJECT_ROOT/$BOOST_DIR
    COVERAGE_ROOT: $PROJECT_ROOT/$COVERAGE_DIR
    #COVERAGE_ROOT: $CIRCLE_ARTIFACTS

    # set TravisCI variabls because various tools uses them
    #TRAVIS_BRANCH: $CIRCLE_BRANCH
    #TRAVIS_BUILD_DIR: $HOME/$CIRCLE_PROJECT_REPONAME
    #TRAVIS_COMMIT: $CIRCLE_SHA1
    #TRAVIS_COMMIT_RANGE: $CIRCLE_SHA1
    #TRAVIS_BUILD_ID: $CIRCLE_BUILD_NUM
    #TRAVIS_BUILD_NUMBER: $CIRCLE_BUILD_NUM
    #TRAVIS_JOB_ID: $((CIRCLE_NODE_INDEX+1))
    #TRAVIS_JOB_NUMBER: $TRAVIS_BUILD_NUMBER.$TRAVIS_JOB_ID
    #TRAVIS_PULL_REQUEST: $CI_PULL_REQUEST

    # this is not fully bulletproof, ideally one should check
    # if the current branch originates in master or develop
    # but it's good enough
    BOOST_BRANCH: $([[ "$CIRCLE_BRANCH" = "master" ]] && echo master || echo develop)

dependencies:
  pre:
    - sudo apt-get update
    - sudo apt-get install gcc-4.8 g++-4.8 build-essential
    - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 10
    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 10
    - sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-4.8 10
    - sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 20
    - sudo update-alternatives --set cc /usr/bin/gcc
    - sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 20
    - sudo update-alternatives --set c++ /usr/bin/g++
    - sudo update-alternatives --config gcc
    - sudo update-alternatives --config g++
    - sudo update-alternatives --config gcov
    #- sudo apt-get install clang
    #- sudo ln -s /usr/lib/llvm-3.0/lib/libprofile_rt.a /usr/lib/libprofile_rt.a
    - sudo apt-get install python-yaml
    - sudo apt-get install jq

    - mkdir $BOOST_ROOT
    - cd $BOOST_ROOT && git init .
    - cd $BOOST_ROOT && git remote add --no-tags -t $BOOST_BRANCH origin https://github.com/boostorg/boost.git
    - cd $BOOST_ROOT && git fetch --depth=1
    - cd $BOOST_ROOT && git checkout $BOOST_BRANCH
    - cd $BOOST_ROOT && git submodule update --init --merge
    - cd $BOOST_ROOT && git remote set-branches --add origin $BOOST_BRANCH
    - cd $BOOST_ROOT && git pull --recurse-submodules
    - cd $BOOST_ROOT && git submodule update --init
    - cd $BOOST_ROOT && git checkout $BOOST_BRANCH
    - cd $BOOST_ROOT && git submodule foreach "git reset --quiet --hard; git clean -fxd"
    - cd $BOOST_ROOT && git reset --hard; git clean -fxd
    - cd $BOOST_ROOT && git status
    - cd $BOOST_ROOT && rm -rf libs/geometry/
    - mkdir $BOOST_ROOT/libs/geometry
    - cp -R `ls -A | grep -v $BOOST_DIR` $BOOST_ROOT/libs/geometry/
    - cd $BOOST_ROOT && ./bootstrap.sh
    - cd $BOOST_ROOT && ./b2 headers

    # wait with the further modifications of the project directory until now
    # to avoid copying into the $BOOST_ROOT/libs/geometry/

    - wget http://downloads.sourceforge.net/ltp/lcov-1.11.tar.gz
    - tar xvzf lcov-1.11.tar.gz
    - cd lcov-1.11 && sudo make install
    - gem install coveralls-lcov

    - if [ ! -d $COVERAGE_ROOT ]; then mkdir $COVERAGE_ROOT; fi

test:
  override:
    # `--coverage` flags required to generate coverage info for Coveralls
    # temporary for test purposes
    #- cd $BOOST_ROOT/libs/geometry && ../../b2 cxxflags="--coverage" linkflags="--coverage" test/algorithms
    #- cd $BOOST_ROOT/libs/geometry && ../../b2 cxxflags="--coverage" linkflags="--coverage" test/algorithms/detail
    #- cd $BOOST_ROOT/libs/geometry && ../../b2 cxxflags="--coverage" linkflags="--coverage" test/algorithms/relational_operations
    - cd $BOOST_ROOT/libs/geometry && ../../b2 cxxflags="--coverage" linkflags="--coverage" test
    - cd $BOOST_ROOT/libs/geometry && ../../b2 cxxflags="--coverage" linkflags="--coverage" index/test/algorithms
    - cd $BOOST_ROOT/libs/geometry && ../../b2 cxxflags="--coverage" linkflags="--coverage" index/test/rtree/exceptions
    # run the tests in parallel - actually for now not in parallel
    # the problem is that first the upper-level dir is handled
    # then the tests from lower dir are run are executed and they're overlapping
    #- cd $BOOST_ROOT/libs/geometry && index=0 ; run_tests() { for i in "$1"/* ; do if [ -f "$i"/Jamfile* ] ; then ((index++)) ; echo "$index - $i" ; ../../b2 cxxflags="--coverage" linkflags="--coverage" "$i" ; run_tests "$i" ; fi ; done } ; run_tests test
    # so first try manually
    #- cd $BOOST_ROOT/libs/geometry && case $CIRCLE_NODE_INDEX in 0) ../../b2 cxxflags="--coverage" linkflags="--coverage" test/io ;; 1) ../../b2 cxxflags="--coverage" linkflags="--coverage" test/views ;; esac:
    #        parallel: true

  post:
    ## Copying Coveralls data to a separate folder
    #- find $BOOST_ROOT/bin.v2/ -name "*.gcda" -exec cp "{}" $COVERAGE_ROOT \;
    #- find $BOOST_ROOT/bin.v2/ -name "*.gcno" -exec cp "{}" $COVERAGE_ROOT \;
    # upgraded version - change the file name if exists
    - find $BOOST_ROOT/bin.v2/ -name "*.gcda" -exec bash -c 'filen=$(basename $1) ; filen=${filen%.*} ; dirn=$(dirname $1) ; srcgcda=$dirn/$filen.gcda ; srcgcno=$dirn/$filen.gcno ; echo "$srcgcda" ; if [ -f $COVERAGE_ROOT/$(basename $1) ]; then randn=$RANDOM ; cp $srcgcda $COVERAGE_ROOT/$filen.$randn.gcda ; cp $srcgcno $COVERAGE_ROOT/$filen.$randn.gcno ; else cp $srcgcda $COVERAGE_ROOT/ ; cp $srcgcno $COVERAGE_ROOT/ ; fi' bash "{}" \; #:
        #parallel: true

    ## Preparing Coveralls data by

    ## ... changind data format to a readable one

    - cd $BOOST_ROOT/libs/geometry && lcov --directory $COVERAGE_ROOT --base-directory ./ --capture --output-file $COVERAGE_ROOT/coverage.info #:
        #parallel: true

    ## ... erasing /usr and unneeded directories data
    - lcov --remove $COVERAGE_ROOT/coverage.info "/usr*" "*/libs/geometry/*" -o $COVERAGE_ROOT/coverage.info #:
        #parallel: true

    ## ... erasing data that is not related to this project directly
    - ls $BOOST_ROOT/boost | sed -r '/(geometry.*)/d' | sed -r 's/(.+)/"*\/boost\/\1\/*"/g' | sed -r 's/(.+\.hpp)\/\*/\1/g' | sed ':a;N;$!ba;s/\n/ /g' | xargs lcov --remove $COVERAGE_ROOT/coverage.info -o $COVERAGE_ROOT/coverage.info #:
        #parallel: true

    ## ... sanity check
    - ls -lah $COVERAGE_ROOT #:
        #parallel: true

    ## Sending data to Coveralls

    ## ... send
    #- coveralls-lcov --repo-token=$COVERALLS_REPO_TOKEN $COVERAGE_ROOT/coverage.info :
    #    parallel: true

    ## ... or handle sending manually
    ## ... convert data with coveralls-lcov
    - coveralls-lcov --repo-token=$COVERALLS_REPO_TOKEN -v -n $COVERAGE_ROOT/coverage.info > $COVERAGE_ROOT/coverage.json #:
        #parallel: true

    ## ... alter the json file
    - jq -c ".service_name = \"circleci\" | .service_job_id = \"$CIRCLE_BUILD_NUM.$((CIRCLE_NODE_INDEX+1))\" | .git .branch =\"$CIRCLE_BRANCH\"" $COVERAGE_ROOT/coverage.json > $COVERAGE_ROOT/processed.json #:
        #parallel: true

    ## ... send it to Coveralls
    - curl --retry 3 -F "json_file=@$COVERAGE_ROOT/processed.json" 'https://coveralls.io/api/v1/jobs' #:
        #parallel: true
